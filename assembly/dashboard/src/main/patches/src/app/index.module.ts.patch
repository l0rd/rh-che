--- src/app/index.module.ts
+++ src/app/index.module.ts
@@ -37,12 +37,65 @@
 import {RouteHistory} from '../components/routing/route-history.service';
 import {CheUIElementsInjectorService} from '../components/service/injector/che-ui-elements-injector.service';
 import {WorkspaceDetailsService} from './workspaces/workspace-details/workspace-details.service';
+import * as Keycloak from '../components/keycloak/keycloak';
+ 
+function buildKeycloakConfig(keycloakSettings) {
+    return {
+        url: keycloakSettings['che.keycloak.auth_server_url'],
+        realm: keycloakSettings['che.keycloak.realm'],
+        clientId: keycloakSettings['che.keycloak.client_id']
+    };
+}
+
+let keycloakConfig;
 
 // init module
 const initModule = angular.module('userDashboard', ['ngAnimate', 'ngCookies', 'ngTouch', 'ngSanitize', 'ngResource', 'ngRoute',
   'angular-websocket', 'ui.bootstrap', 'ui.codemirror', 'ngMaterial', 'ngMessages', 'angularMoment', 'angular.filter',
   'ngDropdowns', 'ngLodash', 'angularCharts', 'uuid4', 'angularFileUpload']);
 
+angular.element(document).ready(($injector) => {
+
+  let promise = $injector.get('../wsmaster/api/keycloak/settings');
+
+  function keycloakInit(keycloakDisabled, keycloakSettings) {
+      if (keycloakDisabled) {
+        window['_keycloak'] = false;
+        angular.bootstrap(document, ['userDashboard'], {strictDi:true}); // manually bootstrap Angular
+      } else {
+        keycloakConfig = buildKeycloakConfig(keycloakSettings);
+        window['_keycloak'] = Keycloak(keycloakConfig);
+        window['_keycloak']
+          .init({
+            onLoad: 'check-sso', checkLoginIframe: false, responseMode: 'query'
+          })
+          .success(() => {
+            angular.bootstrap(document, ['userDashboard'], {strictDi:true}); // manually bootstrap Angular
+          });
+      }
+    
+  }
+
+  promise.then((keycloakSettings) => {
+    console.log('keycloakSettings : ', keycloakSettings);
+    if (keycloakSettings['che.keycloak.disabled'] == 'true') {
+      keycloakInit(true, keycloakSettings);
+    } else {
+      keycloakInit(false, keycloakSettings);
+    }
+  }, (error) => {
+    console.log('Error when retrieving Keycloak settings:', error);
+    keycloakInit(false);
+  });
+  
+  console.log('Running Keycloak init sequence');
+
+});
+
+initModule.factory('keycloak', $window => {
+    return $window._keycloak;
+});
+
 // add a global resolve flag on all routes (user needs to be resolved first)
 initModule.config(['$routeProvider', ($routeProvider: che.route.IRouteProvider) => {
   $routeProvider.accessWhen = (path: string, route: che.route.IRoute) => {
@@ -173,6 +226,45 @@
 ]);
 
 // add interceptors
+initModule.factory('KeyCloakTokenInterceptor', ($q, keycloak) => {
+  return {
+    request: (config) => {
+      console.log('keycloak token interceptor request for ' + config.url);
+      if (keycloak && config.url.indexOf(keycloakConfig.url) > -1) {
+        console.log('skipped token injection for ' + config.url);
+        return config;
+      }
+      if (keycloak && keycloak.token) {
+        console.log('refreshing token : ' + config.url);
+        let deferred = $q.defer();
+        keycloak.updateToken(5).success(function () {
+          config.headers = config.headers || {};
+          angular.extend(config.headers, {'Authorization': 'Bearer ' + keycloak.token});
+          console.log('injecting token : ' + config.url);
+          deferred.resolve(config);
+        }).error(function () {
+          console.log('token refresh failed :' + config.url);
+          deferred.reject('Failed to refresh token');
+        });
+        return deferred.promise;
+      }
+      return config || $q.when(config);
+    },
+    response: (response) => {
+      console.log('RESPONSE '+response.config.url+ ' :' + JSON.stringify(response));
+      return response || $q.when(response);
+    },
+    responseError: (rejection)=>{
+        console.log('ERROR (response) : '+ JSON.stringify(rejection));
+        return $q.reject(rejection);
+    },
+    requestError: (rejection) =>{
+       console.log('ERROR (request) : '+ JSON.stringify(rejection));
+       return $q.reject(rejection);
+    }
+  }
+});
+
 initModule.factory('ETagInterceptor', ($window: ng.IWindowService, $cookies: ng.cookies.ICookiesService, $q: ng.IQService) => {
 
   const etagMap = {};
@@ -358,6 +450,7 @@
 });
 
 initModule.config(['$routeProvider', '$httpProvider', ($routeProvider: che.route.IRouteProvider, $httpProvider: ng.IHttpProvider) => {
+  $httpProvider.interceptors.push('KeyCloakTokenInterceptor');
   // add the ETag interceptor for Che API
   $httpProvider.interceptors.push('ETagInterceptor');
 }]);
